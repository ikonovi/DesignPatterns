
                        Типы шаблонов
                        -------------

  Лектор: Тимур Батыршинов (http://javabegin.ru).

Порождающие (Creational) — создание объектов.

* Одиночка - Singleton
* Фабричный метод - Factory Method
* Абстрактная фабрика - Abstract Factory

Структурные (Ѕtruсturаl) — изменение и доработка существующих интерфейсов.

* Декоратор - Decorator/Wrapper
* Адаптер  - Adapter
* Фасад - Facade

Поведенческие (Behavioral) — взаимодействие между объектами, уменьшение связей.

* Наблюдатель - Observer
* Стратегия - Strategy
* Состояние - State

======================================================================================

                          КОНСПЕКТ
         Software design patterns (Шаблоны проектирования ПО)

----------------------------------------------------------------------------------
        Creational (Порождающие) - абстрагируют процесс инстанцирования. Они позволяют сделать систему независимой от способа создания, композиции и представления объектов.
----------------------------------------------------------------------------------

1. Singleton (Одиночка)

гарантирует, что в однопроцессном приложении будет единственный экземпляр некоторого класса, и предоставляет глобальную точку доступа к этому экземпляру.
Examples:
State objects, Facade objects


2. Factory Method (Фабричный метод/Виртуальный конструктор).

видео-курс:
- Известен интерфейс, но заранее неизвестно какая из реализаций будет использоваться
- Получение ссылки на объект в зависимости от входящих условий

Назначение:
Для создания объектов различных типов одним интерфейсом

Плюсы:
Создание объектов, независимо от их типов и сложности процесса создания.

Минусы:
Даже для одного объекта необходимо создать соответствующую фабрику, что увеличивает код

Цель:
Определяет интерфейс для создания объекта, но оставляет подклассам решение о том, какой класс инстанцировать. Фабричный метод позволяет классу делегировать создание подклассов. Используется, когда:
    классу заранее неизвестно, объекты каких подклассов ему нужно создавать.
    класс спроектирован так, чтобы объекты, которые он создаёт, специфицировались подклассами.
    класс делегирует свои обязанности одному из нескольких вспомогательных подклассов, и планируется локализовать знание о том, какой класс принимает эти обязанности на себя

Достоинства:
- позволяет сделать код создания объектов более универсальным, не привязываясь к конкретным классам (ConcreteProduct), а оперируя лишь общим интерфейсом (Product);
- позволяет установить связь между параллельными иерархиями классов.

Недостатки:
    необходимость создавать наследника Creator для каждого нового типа продукта (ConcreteProduct).

Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses

Factory method pattern uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created.

This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.


3. Abstract Factory (Абстрактная фабрика)

видео-курс:
- Фабрика по созданию семейства объектов разных типов, в отличие от фабричного метода, где возвращался экземпляр одного типа.
- Более расширенный вариант шаблона Фабричный метод
- Объекты внутри фабрики связаны по смыслу или по задаче


----------------------------------------------------------------------------------
        Structural (Структурные) -  рассматривается вопрос о том, как из классов и
        объектов образуются более крупные структуры
----------------------------------------------------------------------------------

4. Декоратор (Decorator)

предназначенный для динамического подключения дополнительного поведения к объекту.
Шаблон Декоратор предоставляет гибкую альтернативу практике создания подклассов
с целью расширения функциональности.

Attach additional responsibilities to an object dynamically keeping the same interface.
Decorators provide a flexible alternative to subclassing for extending functionality.


5. Адаптер (Adapter, Wrapper, or Translator)
  Задача:
Система поддерживает требуемые данные и поведение, но имеет неподходящий интерфейс.
  Способ решения:
Адаптер предусматривает создание класса-оболочки с требуемым интерфейсом.
  Участники:
Класс Adapter приводит интерфейс класса Adaptee в соответствие с
интерфейсом класса Target (наследником которого является Adapter).
Это позволяет объекту Client использовать объект Adaptee (посредством адаптера Adapter) так,
словно он является экземпляром класса Target.
Таким образом Client обращается к интерфейсу Target, реализованному в наследнике Adapter,
который перенаправляет обращение к Adaptee.

Шаблон Адаптер позволяет в процессе проектирования не принимать во внимание возможные различия в
интерфейсах уже существующих классов. Если есть класс, обладающий требуемыми методами и свойствами
(по крайней мере, концептуально), то при необходимости всегда можно воспользоваться
шаблоном Адаптер для приведения его интерфейса к нужному виду. Близким Адаптеру
является шаблон Фасад, не всегда можно отличить один от другого.

Converts one interface to another so that it matches what the client is expecting.


6. Фасад (Facade)
- Скрыть сложную внутреннюю реализацию и предоставить простой интерфейс
- Упрощение взаимодействия с объектами системы (или нескольких систем)
- Более высокий уровень использования системы
- Можно обращаться и к самим внутренним объектам (без фасада)

Provide a unified interface to a set of interfaces in a subsystem.
Facade defines a higher-level interface that makes the subsystem easier to use.


	Сравнение структурный патернов по их цели, предназначению.
Adapter or Wrapper - Converts one interface to another so that it matches what the client is expecting.
Decorator -	Dynamically adds responsibility to the interface by wrapping the original code.
Delegation - Support "composition over inheritance".
Facade - Provides a simplified interface.


----------------------------------------------------------------------------------
        Behavioral (Поведенческие) - определяющие алгоритмы и способы реализации взаимодействия различных объектов и классов.
----------------------------------------------------------------------------------

7. Observer or Publish/subscribe (Наблюдатель)

Паблишер оповешает всех своих подписчиков о наступлении некого события.


8. State (Состояние)

Объект меняет свое поведение в зависимости от своего состояния.
Позволяет избегать многочисленных условий if.


9. Strategy (Стратегия), Policy

видео-курс:
  - Выбор одного из семейства алгоритмов для выполнения действия.
  - Не зависит от конкретных реализаций.
  - Замысел действия один, а реализации - разные.
  Классический пример: сортировка Collections.sort()

  Отличия от паттeрна State
  - не хранит ссылку на объект
  - действие выполняется только однажды.

  on wiki - en
  * defines a family of algorithms,
  * encapsulates each algorithm, and
  * makes the algorithms interchangeable within that family.

  on wiki - ru
  - Шаблон Strategy определяет семейство алгоритмов.
  - Это позволяет отказаться от использования переключателей и/или условных операторов.
  - Вызов всех алгоритмов должен осуществляться стандартным образом (все они должны иметь одинаковый интерфейс).


+ 10. Command (Команда)

  on wiki - en
    Для обработки команды в виде объекта
    Четыре термина:
      приёмник команд (receiver),
      команды (command),
      вызывающий команды (invoker),
      клиент (client).

  on wiki - en
Four terms always associated with the command pattern are command, receiver, invoker and client. A command object knows about receiver and invokes a method of the receiver. Values for parameters of the receiver method are stored in the command, the receiver object to execute these methods is also stored in the command object by aggregation. The receiver then does the work when the execute() method in command is called. An invoker object knows how to execute a command, and optionally does bookkeeping about the command execution. The invoker does not know anything about a concrete command, it knows only about command interface. Invoker object(s), command objects and receiver objects are held by a client object, the client decides which receiver objects it assigns to the command objects, and which commands it assigns to the invoker. The client decides which commands to execute at which points. To execute a command, it passes the command object to the invoker object.

What problems can the Command design pattern solve?
    * Coupling the invoker of a request to a particular request should be avoided. That is, hard-wired requests should be avoided.
    * It should be possible to configure an object (that invokes a request) with a request.

Implementing (hard-wiring) a request directly into a class is INflexible because it couples the class to a particular request at compile-time, which makes it impossible to specify a request at run-time.

What solution does the Command design pattern describe?
    * Define separate (command) objects that encapsulate a request.
    * A class delegates a request to a command object instead of implementing a particular request directly.

This enables to configure a class with a command object that is used to perform a request. The class is no longer coupled to a particular request and has no knowledge (is independent) of how the request is carried out.

-----------------------------------------------------------------------------
      Partitioning (разбиение, разделение, декомпозиция) design patterns
-----------------------------------------------------------------------------

+ 11. Компоновщик (англ. Composite)

    Цель
Паттерн определяет иерархию классов, которые одновременно могут состоять из примитивных и сложных объектов.
Компоновщик позволяет клиентам обращаться к отдельным объектам и к группам объектов одинаково

  WiKi en
The composite pattern describes a group of objects that is treated the same way as a single instance of the same type of object. The intent of a composite is to "compose" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.

What problems can the Composite design pattern solve?
    A part-whole hierarchy should be represented so that clients can treat part and whole objects uniformly.
    A part-whole hierarchy should be represented as tree structure.

When defining Part objects and Whole objects that act as containers for Part objects, clients must treat them separately, which complicates client code.

What solution does the Composite design pattern describe?
    Define a unified Component interface for both part (Leaf) objects and whole (Composite) objects.
    Individual Leaf objects implement the Component interface directly, and Composite objects forward requests to their child components.

This enables clients to work through the Component interface to treat Leaf and Composite objects uniformly: Leaf objects perform a request directly, and Composite objects forward the request to their child components recursively downwards the tree structure. This makes client classes easier to implement, change, test, and reuse.
